
--  with System;
--  with System.Storage_Elements;

with Interfaces;

with Ada.Sequential_IO;
with Ada.Exceptions; use Ada.Exceptions;
with Ada.Streams;
with Ada.Streams.Stream_IO;
with Ada.Text_IO;
--  with Ada.Strings.Unbounded;

with Printing;

package body Photon_Data is


   procedure Photon_Data (Source_File, Photon_Times_Directory : String) is
      use Ada.Streams;
      use Ada.Text_IO;
      use Printing;
      use Types;
      type  Char_64 is array (1 .. 64) of Character;
      pragma Unreferenced (Char_64);

      Routine_Name      : constant String := "Utils.Photon_Data ";
      Photon_Times_File : constant String :=
        Photon_Times_Directory & "Photon_Times.csv";

      Source_ID   : Stream_IO.File_Type;
      PT_ID       : Ada.Text_IO.File_Type;
      Data_Stream : Stream_IO.Stream_Access;
      Line_Num    : Natural := 0;
      Data        : Byte_Array;
      Number      : Float;
   begin
      Ada.Text_IO.Put_Line (Routine_Name & "Source File: " & Source_File);
      Ada.Text_IO.New_Line;
      Stream_IO.Open (Source_ID, Stream_IO.In_File, Source_File);
      Data_Stream := Stream_IO.Stream (Source_ID);
      Ada.Text_IO.Create (PT_ID, Ada.Text_IO.Out_File, Photon_Times_File);

      while Line_Num < 5 and not Stream_IO.End_Of_File (Source_ID) loop
         Line_Num := Line_Num + 1;
         Byte_Array'Read (Data_Stream, Data);
         Print_Byte_Array (Routine_Name & "Data", Data);
         Number := To_IEEE_Double_Big_Endian (Data);
         Ada.Text_IO.Put_Line ("Line_Num: " & Integer'Image (Line_Num));
         Ada.Text_IO.Put_Line ("Number: " & Float'Image (Number));
         Put (PT_ID, Number'Image);
         if not Stream_IO.End_Of_File (Source_ID) then
            Put (PT_ID, ",");
         end if;
      end loop;

      Ada.Text_IO.Close (PT_ID);
      Stream_IO.Close (Source_ID);

      Ada.Text_IO.Put_Line
        (Routine_Name & "Photon times file written to " &
           Photon_Times_Directory);

   exception
      when Error : others =>
         Put_Line (Routine_Name & Exception_Information (Error));

   end Photon_Data;

   --  -------------------------------------------------------------------------


end Utils;
